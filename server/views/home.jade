include ./header.jade
    block content
        div.container
            include ./navbar.jade
            div.jumbotron
                h1 Saison 1
                p Retrouvez tous les scores de la saison 1 sur cette page, la saison se termine à la fin de la sixième partie...
        div.container-fluid#season
            div.row#classement
                h2
                    i.material-icons timeline
                    span Classement
            div.row#race
                h2
                    i.material-icons grade
                    span Statistiques races
            div.row#gameResults
                h2
                    i.material-icons dashboard
                    span Détails des parties
                    

script.
    function getGlobalDatas(cb){
        $.get('/api/games/season/' + 1, function (games) {
            $.get('/api/seasons/'+1+'/players', function (players) {
                $.get('/api/races', function (races) {
                    getPlayers(players, 1, function(playersDatas){
                        var datas = {
                            games:games,
                            races:races,
                            players:playersDatas
                        };
                        return cb(datas);
                    });
                });
            });
        });
    }

    function getPlayers(players_id, season_id, cb){
        var players = [];
        var promises = []
        players_id.forEach(function(item){
            var request = $.get('/api/players/' + item, function (player) {
                $.get('/api/gameResults/season/'+season_id+'/player/'+player._id, function(bestFourGame){
                    player.bestFour = bestFourGame;
                    players.push(player);
                });
            });
            promises.push(request);
        });
        $.when.apply(null, promises).done(function(){
            return cb(players);
        });
    };

    function sortByRanking(a, b, index){
        if(b.rank[index] == undefined)
            b.rank[index] = 0;
        if(a.rank[index] == undefined)
            a.rank[index] = 0;

        if(b.rank[index] - a.rank[index] != 0)
            return b.rank[index] - a.rank[index];
        else
            return sortByRanking(a, b, index++);
    };

    function sortByPoints(a, b){
        return b.point-a.point;
    };

    function sortGeneralRanking(a, b){
        if(b.point-a.point != 0){
            return b.point-a.point;
        }
        else{
            return sortByRanking(a, b, 1);
        }
    };

    function sortById(a, b){
        return a._id-b._id;
    };

    function sortByPlayer(a, b){
        return a._player-b._player;
    };

    getGlobalDatas(function(datas){
        showGamesScores(datas);
    });

    function getDatasById(datas, id){
        for(var i = 0; i < datas.length; i++){
            if(datas[i]._id == id)
                return datas[i];
        }
    };

    function showGamesScores(datas){
        var promises = [];
        datas.results = [];
        var counter = 0;
        datas.games.forEach(function(game){
            counter++;
            $('#gameResults').append('<div class="col-md-4"><h3>Partie '+game._id+'</h3><table class="table table-striped" id="game"><thead><tr><th>Joueur</th><th>Race</th><th>Points</th><th></th><th>Total</th></tr></thead><tbody id="game'+game._id+'"></tbody></table></div>');

            var request = $.get('/api/gameResults/game/' + game._id, function (gameResults) {
                datas.results[game._id] = gameResults.sort(sortByPoints);
                datas.results[game._id].forEach(function(res){
                    var player = getDatasById(datas.players, res._player).name;
                    var race = getDatasById(datas.races, res._race).name;
                    $('#game'+game._id).append("<tr><td>"+player+"</td><td>"+race+"</td><td>"+res.point+"</td><td>("+res.bonus+")</td><td><strong>"+(res.point+res.bonus)+"</strong></td></tr>");
                });
            });
            promises.push(request);
            if(counter == 3)
                $('#season').append("<div class='row'/>");
        });
        $.when.apply(null, promises).done(function(){
            showRanking(datas);
            chart(datas);
        });
    };

    function showRanking(scores){
        var playerScores = [];
        var raceStats = [];
        $('#classement').append('<div class="col-md-4"><table id="table_player" class="table table-striped"><thead><tr><th></th><th class="text-center">Joueur</th><th class="text-right">Points</th><th class="text-right">Nb game</th><th class="text-right">Ratio</th></tr></thead><tbody id="scoresRow"></tbody></table></div>');
        $('#classement').append('<div class="col-md-8"><div id="chart_div" style="height: 600px"></div></div>');
        $('#race').append('<div class="col-md-offset-2 col-md-8"><table id="table_race" class="table table-striped"><thead><tr><th>Logo</th><th class="text-center">Race</th><th class="text-right">Points</th><th class="text-right">Nb game</th><th class="text-right">Ratio</th></tr></thead><tbody id="racesRow"></tbody></table></div>');
        for(var j = 1; j < scores.results.length; j++){
            var game = scores.results[j];
            for(var i = 0; i < game.length; i++){
                if(playerScores[game[i]._player] == undefined){
                    var data = {
                        name:getDatasById(scores.players, game[i]._player).name,
                        point:0,
                        nbGame:0,
                        path:getDatasById(scores.players, game[i]._player).path,
                        rank:[]
                    }
                    playerScores[game[i]._player] = data;
                }

                var bestFour = getDatasById(scores.players, game[i]._player).bestFour;
                if(bestFour.indexOf(game[i]._id) != -1){
                    playerScores[game[i]._player].point += game[i].point+game[i].bonus;
                }
                playerScores[game[i]._player].nbGame++;

                if(playerScores[game[i]._player].rank[game[i].rank] == undefined)
                    playerScores[game[i]._player].rank[game[i].rank] = 0;
                playerScores[game[i]._player].rank[game[i].rank]++;

                if(raceStats[game[i]._race] == undefined){
                    var data = {
                        name:scores.races[game[i]._race-1].name,
                        name:getDatasById(scores.races, game[i]._race).name,
                        nbGame:0,
                        point:0,
                        path:getDatasById(scores.races, game[i]._race).path
                    }
                    raceStats[game[i]._race] = data;
                }
                raceStats[game[i]._race].nbGame++;
                raceStats[game[i]._race].point += game[i].point+game[i].bonus;
             };
        };
        playerScores.sort(sortGeneralRanking);
        raceStats.sort(sortByPoints);
        // Draw player stats
        for(var i in playerScores){
            $('#scoresRow').append("<tr class='success'><td class='row-picture'><img style='width:50px;' class='circle' src='"+playerScores[i].path+"' alt=''></td><td>"+playerScores[i].name+"</td><td class='text-right'><strong>"+playerScores[i].point+"</strong></td><td class='text-right'>"+playerScores[i].nbGame+"</td><td class='text-right'>"+(Math.round(playerScores[i].point/playerScores[i].nbGame * 100)/100)+"</td><</tr>");
        }

        // Draw racial stats
        for(var race in raceStats){
            $('#racesRow').append("<tr class='warning'><td><img style='width:30px;' src=\""+raceStats[race].path+"\" alt=''/></td><td>"+raceStats[race].name+"</td><td class='text-right'><strong>"+raceStats[race].point+"</strong></td><td class='text-right'>"+raceStats[race].nbGame+"</td><td class='text-right'>"+(raceStats[race].point/raceStats[race].nbGame).toFixed(2)+"</td><</tr>");
        }

        $('#table_player').DataTable({
            "searching": false,
            "paging":   false,
            "info":     false
        });
        $('#table_race').DataTable({
            "searching": false,
            "paging":   false,
            "info":     false
        });
    };

    function chart(scores){
        google.charts.load('current', {packages: ['corechart', 'line']});
        google.charts.setOnLoadCallback(drawCrosshairs);

        function drawCrosshairs() {
            var data = new google.visualization.DataTable();
            data.addColumn('number', 'X');
            scores.players.sort(sortById).forEach(function(player){
                data.addColumn('number', player.name);
            });
            var allRows = [];
            var cumul = [];
            for(var i = 0; i < scores.players.length+1; i++){
                cumul.push(0);
            }
            allRows.push(cumul);
            for(var j = 1; j < scores.results.length; j++){
                var game = scores.results[j].sort(sortByPlayer);
                var row = [];
                row.push(j);
                for(var i = 0; i < scores.players.length; i++){
                    row.push(0);
                }
                for(var i = 0; i < game.length; i++){
                    row[game[i]._player] = game[i].point+game[i].bonus;
                }
                allRows.push(row);
            }
            for(var i = 0; i < allRows.length; i++){
                for(var j = 0; j < allRows[i].length; j++){
                    if(i != 0 & j != 0)
                        allRows[i][j] += allRows[i-1][j];
                }
            }
            data.addRows(allRows);

            var options = {
                hAxis: {
                  title: 'Games'
                },
                vAxis: {
                  title: 'Points'
                },
                colors: ['#FF5252', '#CDDC39', '#7B1FA2', '#009688', '#5D4037', '#727272', '#03A9F4', '#FF4081', '#212121'],
                crosshair: {
                  color: '#EEEEEE',
                  trigger: 'selection'
                }
            };

            var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

            chart.draw(data, options);
            chart.setSelection([{row: 38, column: 1}]);
            $('rect').attr('fill', '#EEEEEE');
        }
    };
