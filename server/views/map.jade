include ./header.jade
    block content
        div.container
            include ./navbar.jade
            div.page-header
                h1 Générateur de carte
        div.container-fluid
            div.col-sm-3
                div.row
                    h2 Paramètres
                    p Ecart max sur la somme ressources et influence
                    p
                        input#ecart(type="text" value="10")
                    h2 Nombre de joueurs
                    p.btn-group
                        button.btn.btn-success.btn-raised#player(value="5") 5
                        button.btn.btn-success.btn-raised#player(value="6") 6
                        button.btn.btn-success.btn-raised#player(value="7") 7
                        button.btn.btn-success.btn-raised#player(value="8") 8
                div.row
                    h2 Propriétés de la carte
                    div.panel.panel-default
                        div.panel-heading Répartition ressources et influences
                            p Ecart max constaté :
                                strong#ecart_actual
                        table.table.table-over#stats
                            thead
                                th Position
                                th Ressources
                                th Influences
                                th Total
                            tbody
            div.col-sm-9
                map

script.
    $(document).ready(function(){ 
        $("button").click(function(){
            nbplayer = $(this).val();
            ecart = $("#ecart").val();
            create_map();
        });
        
    });

    var nbplayer = 5;
    var ecart = 10;
    var SVG_SIZE = $(window).height();
    create_map();

    function create_map (){
        reset_map();
        nexus = false;
        
        var svgContainer = d3.select("map")
            .append("svg")
            .attr("id", "svg_map")
            .attr("width", "100%")
            .attr("height", SVG_SIZE*0.80);

        var range = 4;
        if(nbplayer === undefined) nbplayer = 5;
        if(nbplayer > 6) range = 5;

        var TILE_SIZE = SVG_SIZE / (((range*2)-1)*Math.sqrt(3)*1.05);

        $.get('/api/maps/new/' + nbplayer+'/'+ecart
            , function (res) {
                draw_tile(res.map.stats, res.map._tiles, TILE_SIZE, svgContainer);
                window.zoomTiger = svgPanZoom('#svg_map', {
                    zoomEnabled: true,
                    controlIconsEnabled: true,
                    fit: true,
                    center: true,
                    panEnabled: true
                }); 
            });
    }

    function reset_map () {
        systems = [];
        d3.selectAll("svg").remove();
    }

    function draw_stats(stats){
        $("#stats tbody").empty();
        stats.datas.forEach(function(item){
            var classToAdd = "";
            var index = stats.datas.indexOf(item); 
            if(index == stats.minIndex)
                classToAdd = "danger";
            else if(index == stats.maxIndex)
                classToAdd = "success";
            $("#stats").append("<tr class="+classToAdd+"><td>"+index+"</td>"+
                                "<td>"+item.ressource+"</td>"+
                                "<td>"+item.influence+"</td>"+
                                "<td>"+(item.ressource+item.influence)+"</td></tr>");
        });
        $("#ecart_actual").text(stats.gap);
    }

    function draw_tile(stats, tiles, tile_size, svg){
        var width = tile_size *2;
        var height = Math.sqrt(3)*tile_size;
        for (var i in tiles) {
            if(tiles[i]._tile != undefined){
                svg.append("svg:image")
                    .attr("xlink:href", tiles[i]._tile.path)
                    .attr("width",      width)
                    .attr("height",     height)
                    .attr("x",          tiles[i].x*tile_size)
                    .attr("y",          tiles[i].y*tile_size);
                if(i < stats.datas.length){
                    var color;
                    var index = stats.datas.indexOf(stats.datas[i]);
                    if(index == stats.minIndex)
                        color = "#f2dede";
                    else if(index == stats.maxIndex)
                        color = "#dff0d8";
                    else
                        color = "gray";
                    svg.append("svg:circle")
                        .attr("cx",          tiles[i].x*tile_size+tile_size)
                        .attr("cy",          tiles[i].y*tile_size+Math.sqrt(3)*0.25*tile_size)
                        .attr("fill", color)
                        .attr("stroke", "black")
                        .attr("stroke-width", 3)
                        .attr("r", tile_size/2.5);
                    svg.append("svg:text")
                        .attr("x",          tiles[i].x*tile_size+tile_size-16)
                        .attr("y",          tiles[i].y*tile_size+Math.sqrt(3)*0.25*tile_size+16)
                        .attr("fill", "black")
                        .attr("font-size", "32px")
                        .attr("font-weight", "bold")
                        .text(stats.datas[i].ressource+stats.datas[i].influence);

                    svg.append("svg:circle")
                        .attr("cx",          tiles[i].x*tile_size+0.65*tile_size)
                        .attr("cy",          tiles[i].y*tile_size+Math.sqrt(3)*0.65*tile_size)
                        .attr("fill", "black")
                        .attr("stroke", "white")
                        .attr("stroke-width", 3)
                        .attr("r", tile_size/3);
                    svg.append("svg:text")
                        .attr("x",          tiles[i].x*tile_size+0.65*tile_size-14)
                        .attr("y",          tiles[i].y*tile_size+Math.sqrt(3)*0.65*tile_size+14)
                        .attr("fill", "green")
                        .attr("font-size", "28px")
                        .attr("font-weight", "bold")
                        .text(stats.datas[i].influence);

                    svg.append("svg:circle")
                        .attr("cx",          tiles[i].x*tile_size+1.35*tile_size)
                        .attr("cy",          tiles[i].y*tile_size+Math.sqrt(3)*0.65*tile_size)
                        .attr("fill", "black")
                        .attr("stroke", "white")
                        .attr("stroke-width", 3)
                        .attr("r", tile_size/3);
                    svg.append("svg:text")
                        .attr("x",          tiles[i].x*tile_size+1.35*tile_size-14)
                        .attr("y",          tiles[i].y*tile_size+Math.sqrt(3)*0.65*tile_size+14)
                        .attr("fill", "black")
                        .attr("fill", "red")
                        .attr("font-size", "28px")
                        .attr("font-weight", "bold")
                        .text(stats.datas[i].ressource);
                }
            }

        };
        draw_stats(stats);
    }